# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Achievement {
  title: String!
  body: String!
  id: String!
  isUnlocked: Boolean!
}

type Battery {
  current: Float!
  max: Float!
}

interface Body {
  name: String!
  type: String!
  mass: Float!
  diameter: Float!
  gravity: Float!
  length_of_day: Float!
  orbital_period: Float!
  position: Vector!
}

type CollectionInfo {
  count: Float!
}

enum Hazard {
  NONE
  MINIMUM
  LOW
  MODERATE
  HIGH
  SEVERE
  EXTREME
  INSTANT_DEATH
}

type Hazards {
  bio: Hazard!
  thermal: Hazard!
  weather: Hazard!
  tectonics: Hazard!
}

input InboxFilter {
  isRead: Boolean
}

interface Locatable {
  position: Vector!
}

type Message {
  from: String!
  id: String!
  isRead: Boolean!
  title(translate: Translation): String!
  body(translate: Translation): String!
}

type Moon implements Body & Locatable {
  name: String!
  type: String!
  mass: Float!
  diameter: Float!
  gravity: Float!
  length_of_day: Float!
  orbital_period: Float!
  position: Vector!
  planet: Planet!
}

type Mutation {
  hyperspaceJump(star: String!): MutationResult!
  markAsRead(id: String!): Message!
  rename(name: String!): MutationResult!
  setThrust(thrust: Float!): MutationResult!
  setDesiredAngle(angle: Float!): MutationResult!
  moveTo(planet: String, y: Float, x: Float): MutationResult!
  halt: MutationResult!
}

type MutationResult {
  status: Status!
  message: String
  timestamp: Float!
}

union Object = Planet | Moon | UnidentifiedObject

type PageInfo {
  startCursor: String
  endCursor: String
  hasMore: Boolean!
  count: Float!
}

type Planet implements Body & Locatable {
  name: String!
  type: String!
  mass: Float!
  diameter: Float!
  gravity: Float!
  length_of_day: Float!
  orbital_period: Float!
  position: Vector!
  star: Star
  moons: [Moon!]
  hazards: Hazards
}

type PlanetEntry {
  node: Planet!
  cursor: String!
}

type PlanetsPage {
  entries: [PlanetEntry!]!
  pageInfo: PageInfo!
  collectionInfo: CollectionInfo!
}

type Query {
  moons: [Moon!]!
  planets: [Planet!]!
  currentStar: Star
  pagedStars(cursor: String, take: Int): StarsPage!
  pagedPlanets(cursor: String, take: Int): PlanetsPage!
  stars(nameSearch: String, name: String): [Star!]
  starship: Starship!
  star(name: String!): Star
  inbox(filter: InboxFilter): [Message!]
}

type Star {
  name: String!
  mass: Float!
  position: Vector!
  unidentifiedObjects: [UnidentifiedObject!]!
  planets(type: String): [Planet!]!
  objects: [Object!]!

  """Range between this star and the star our starship is currently in."""
  hyperspaceRange: Float!
  nearbyStars(
    """Range to search for other stars"""
    maxRange: Float
    cursor: String
    take: Int
  ): StarsPage!
}

type StarEntry {
  node: Star!
  cursor: String!
}

type Starship {
  name: String!
  hyperjumping: Boolean!
  queryBattery: Battery!
  task: Task!
  position: Vector!
  velocity: Vector!
  angle: Float!
  thrusting: Boolean!
}

type StarsPage {
  entries: [StarEntry!]!
  pageInfo: PageInfo!
  collectionInfo: CollectionInfo!
}

enum Status {
  OK
  ERROR
}

type Subscription {
  starshipUpdate: Starship!
  starUpdate: Star!
  inboxSub: [Message!]!
  onAchievementUnlocked: Achievement!
}

type Target {
  type: TargetType!
  position: Vector
}

enum TargetType {
  SHIP
  GAMEOBJECT
  POSITION
  LOST
}

type Task {
  target: Target
  type: TaskType!
}

enum TaskType {
  FOLLOW
  ATTACK
  MOVE
  IDLE
  HALT
  MANUAL
}

enum Translation {
  ENGLISH
  DO_NOT_TRANSLATE
}

type UnidentifiedObject implements Locatable {
  position: Vector!
  scannerData: String!
  angle: Float!
}

type Vector {
  x: Float!
  y: Float!
}
