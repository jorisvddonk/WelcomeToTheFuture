# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Achievement {
  title: String!
  body: String!
  id: String!
  isUnlocked: Boolean!
}

type GQLMoon {
  name: String!
  type: String!
  planet: GQLPlanet!
  mass: Float!
  diameter: Float!
  gravity: Float!
  length_of_day: Float!
  orbital_period: Float!
  position: Vector!
}

type GQLPlanet {
  name: String!
  type: String!
  mass: Float!
  diameter: Float!
  gravity: Float!
  length_of_day: Float!
  orbital_period: Float!
  position: Vector!
  star: GQLStar
  moons: [GQLMoon!]
}

type GQLStar {
  name: String!
  mass: Float!
  position: Vector!
  planets: [GQLPlanet!]!
}

type GQLStarship {
  name: String!
  hyperjumping: Boolean!
  task: Task!
  position: Vector!
  velocity: Vector!
  angle: Float!
  thrusting: Boolean!
}

input InboxFilter {
  isRead: Boolean
}

"""Manual control input"""
input ManualControl {
  thrusting: Boolean
  desiredAngle: Float
}

type Message {
  title: String!
  body: String!
  id: String!
  isRead: Boolean!
}

type Mutation {
  manualControl(data: ManualControl!): MutationResult!
  moveTo(planet: String, y: Float, x: Float): MutationResult!
  halt: MutationResult!
  hyperspaceJump(star: String!): GQLStar!
  markAsRead(id: String!): Message!
}

type MutationResult {
  status: Status!
  timestamp: Float!
}

type Query {
  moons: [GQLMoon!]!
  planets: [GQLPlanet!]!
  currentStar: GQLStar
  stars: [GQLStar!]
  starship: GQLStarship!
  star(name: String!): GQLStar
  inbox(filter: InboxFilter): [Message!]
}

enum Status {
  OK
  ERROR
}

type Subscription {
  starshipUpdate: GQLStarship!
  starUpdate: GQLStar!
  inboxSub: Message!
  onAchievementUnlocked: Achievement!
}

type Target {
  type: TargetType!
  position: Vector
}

enum TargetType {
  SHIP
  GAMEOBJECT
  POSITION
  LOST
}

type Task {
  target: Target
  type: TaskType!
}

enum TaskType {
  FOLLOW
  ATTACK
  MOVE
  IDLE
  HALT
  MANUAL
}

type Vector {
  x: Float!
  y: Float!
}
