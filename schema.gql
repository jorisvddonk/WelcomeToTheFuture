# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Achievement {
  title: String!
  body: String!
  id: String!
  isUnlocked: Boolean!
}

enum Hazard {
  NONE
  MINIMUM
  LOW
  MODERATE
  HIGH
  SEVERE
  EXTREME
  INSTANT_DEATH
}

type Hazards {
  bio: Hazard!
  thermal: Hazard!
  weather: Hazard!
  tectonics: Hazard!
}

input InboxFilter {
  isRead: Boolean
}

"""Manual control input"""
input ManualControl {
  thrusting: Boolean
  desiredAngle: Float
}

type Message {
  title: String!
  id: String!
  isRead: Boolean!
  body(translate: Translation): String!
}

type Moon {
  name: String!
  type: String!
  planet: Planet!
  mass: Float!
  diameter: Float!
  gravity: Float!
  length_of_day: Float!
  orbital_period: Float!
  position: Vector!
}

type Mutation {
  hyperspaceJump(star: String!): MutationResult!
  markAsRead(id: String!): Message!
  rename(name: String!): MutationResult!
  manualControl(data: ManualControl!): MutationResult!
  moveTo(planet: String, y: Float, x: Float): MutationResult!
  halt: MutationResult!
}

type MutationResult {
  status: Status!
  timestamp: Float!
}

union Object = Planet | Moon | UnidentifiedObject

type Planet {
  name: String!
  type: String!
  mass: Float!
  diameter: Float!
  gravity: Float!
  length_of_day: Float!
  orbital_period: Float!
  position: Vector!
  star: Star
  moons: [Moon!]
  hazards: Hazards
}

type Query {
  moons: [Moon!]!
  planets: [Planet!]!
  currentStar: Star
  stars(nameSearch: String, name: String): [Star!]
  starship: Starship!
  star(name: String!): Star
  inbox(filter: InboxFilter): [Message!]
}

type Star {
  name: String!
  mass: Float!
  position: Vector!
  unidentifiedObjects: [UnidentifiedObject!]!
  planets(type: String): [Planet!]!
  objects: [Object!]!

  """Range between this star and the star our starship is currently in."""
  hyperspaceRange: Float!
  nearbyStars(
    """Range to search for other stars"""
    maxRange: Float
  ): [Star!]!
}

type Starship {
  name: String!
  hyperjumping: Boolean!
  task: Task!
  position: Vector!
  velocity: Vector!
  angle: Float!
  thrusting: Boolean!
}

enum Status {
  OK
  ERROR
}

type Subscription {
  starshipUpdate: Starship!
  starUpdate: Star!
  inboxSub: [Message!]!
  onAchievementUnlocked: Achievement!
}

type Target {
  type: TargetType!
  position: Vector
}

enum TargetType {
  SHIP
  GAMEOBJECT
  POSITION
  LOST
}

type Task {
  target: Target
  type: TaskType!
}

enum TaskType {
  FOLLOW
  ATTACK
  MOVE
  IDLE
  HALT
  MANUAL
}

enum Translation {
  ENGLISH
  DO_NOT_TRANSLATE
}

type UnidentifiedObject {
  position: Vector!
  scannerData: String!
  angle: Float!
}

type Vector {
  x: Float!
  y: Float!
}
